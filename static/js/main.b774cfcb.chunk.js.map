{"version":3,"sources":["Media/Images/covid19Image.jpg","Components/Navbar/index.js","Layouts/MainLayout.js","Context/CovidData.js","Components/Inputs/index.js","Components/Card/index.js","Components/DataDisplay/index.js","Components/Chart/index.js","App.js","index.js"],"names":["module","exports","Navbar","className","MainLayout","children","style","backgroundImage","Covid19BackgroundImage","Covid19DataContext","createContext","Covid19DataProvider","Provider","Consumer","Inputs","name","defaultValue","handleChange","onChange","Card","tcases","tdeath","trecovered","color","description","useContext","borderBottom","DataDisplay","error","data","covidData","globalData","isGlobal","bigNumberCommas","num","toString","replace","mostRecentCovidDataByQuery","length","country","Country","totalCases","Confirmed","totalDeaths","Deaths","totalRecovered","Recovered","gTotalCases","Global","TotalConfirmed","gTotalDeaths","TotalDeaths","gTotalRecovered","TotalRecovered","Chart","gDataL6","title","dataL6M","Date","slice","deaths","cases","recovered","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stackId","fill","type","domain","stroke","App","useState","countryList","setCountryList","setCovidData","setGlobalData","selectedCountry","setSelectedCountry","setError","setIsGlobal","window","innerWidth","clientWidth","setClientWidth","useEffect","Axios","get","then","response","catch","err","console","log","sort","a","b","addEventListener","onResi","value","e","target","toLowerCase","map","item","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b774cfcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid19Image.a5c4222f.jpg\";","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav>\r\n      <h1 className=\"logo\">Covid-19 Tracker</h1>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Navbar from \"../Components/Navbar\";\r\nimport Covid19BackgroundImage from \"../Media/Images/covid19Image.jpg\";\r\n\r\nfunction MainLayout({ children }) {\r\n  return (\r\n    <div className=\"main-layout\">\r\n      <div className=\"main-layout-content\">\r\n        <Navbar />\r\n        <div\r\n          className=\"main-layout-display-data\"\r\n          style={{\r\n            backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${Covid19BackgroundImage})`,\r\n          }}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainLayout;\r\n","import { createContext } from \"react\";\r\n\r\nconst Covid19DataContext = createContext();\r\n\r\nexport const Covid19DataProvider = Covid19DataContext.Provider;\r\nexport const Covid19DataConsumer = Covid19DataContext.Consumer;\r\n\r\nexport default Covid19DataContext;\r\n","import React, { useContext } from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Inputs({ name, defaultValue, handleChange, children }) {\r\n  return (\r\n    <select name={name} onChange={handleChange} defaultValue={defaultValue}>\r\n      {children}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default Inputs;\r\n","import React, { useContext } from \"react\";\r\nimport \"./styles.scss\";\r\nimport Covid19DataContext from \"../../Context/CovidData\";\r\n\r\nfunction Card({ name, tcases, tdeath, trecovered, color, description, children }) {\r\n  const covidData = useContext(Covid19DataContext);\r\n\r\n  return (\r\n    <div className=\"card\" style={{ borderBottom: `5px solid ${color}` }}>\r\n      <div className=\"card-content\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useContext } from \"react\";\r\nimport Card from \"../Card\";\r\nimport Covid19DataContext from \"../../Context/CovidData\";\r\nimport \"./styles.scss\";\r\n\r\nfunction DataDisplay({ error }) {\r\n  const data = useContext(Covid19DataContext);\r\n  const { covidData, globalData, isGlobal } = data;\r\n\r\n  //used for adding the commas\r\n  const bigNumberCommas = (num) => {\r\n    if (num) {\r\n      return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\r\n    }\r\n  };\r\n\r\n  //query searched\r\n  const mostRecentCovidDataByQuery = covidData && covidData[covidData.length - 1];\r\n  const country = covidData && mostRecentCovidDataByQuery.Country;\r\n  const totalCases = covidData && bigNumberCommas(mostRecentCovidDataByQuery.Confirmed);\r\n  const totalDeaths = covidData && bigNumberCommas(mostRecentCovidDataByQuery.Deaths);\r\n  const totalRecovered = covidData && bigNumberCommas(mostRecentCovidDataByQuery.Recovered);\r\n\r\n  //global\r\n  const gTotalCases = globalData && bigNumberCommas(globalData.Global.TotalConfirmed);\r\n  const gTotalDeaths = globalData && bigNumberCommas(globalData.Global.TotalDeaths);\r\n  const gTotalRecovered = globalData && bigNumberCommas(globalData.Global.TotalRecovered);\r\n\r\n  return (\r\n    <div className=\"covid-data-display\">\r\n      {globalData && (\r\n        <div className=\"data-display-wrap\">\r\n          <div>\r\n            {<h1 className=\"data-display-country\">{isGlobal ? \"Global\" : country}</h1>}\r\n            {error && (\r\n              <p className=\"data-display-error\" style={{ color: \"red\" }}>\r\n                {error}\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"data-display-cards\">\r\n            <Card color=\"orange\">\r\n              <h2>Total Cases</h2>\r\n              <h1>{isGlobal ? gTotalCases : totalCases}</h1>\r\n              <p>The total amount of positive confirmed cases.</p>\r\n            </Card>\r\n\r\n            <Card color=\"red\">\r\n              <h2>Total Deaths</h2>\r\n              <h1>{isGlobal ? gTotalDeaths : totalDeaths}</h1>\r\n              <p>The total amount of deaths confirmed.</p>\r\n            </Card>\r\n\r\n            <Card color=\"green\">\r\n              <h2>Total Recovered</h2>\r\n              <h1>{isGlobal ? gTotalRecovered : totalRecovered}</h1>\r\n              <p>The total amount of positive cases that recovered.</p>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataDisplay;\r\n","import React, { useContext, useState } from \"react\";\r\nimport \"./styles.scss\";\r\nimport {\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  BarChart,\r\n  Bar,\r\n  Area,\r\n  AreaChart,\r\n} from \"recharts\";\r\nimport Covid19DataContext from \"../../Context/CovidData\";\r\nimport Inputs from \"../Inputs\";\r\n\r\nfunction Chart({}) {\r\n  const data = useContext(Covid19DataContext);\r\n  const { covidData, globalData, isGlobal } = data;\r\n\r\n  const gDataL6 = globalData && [\r\n    { title: \"Total Confirmed\", TotalConfirmed: globalData.Global.TotalConfirmed },\r\n    {\r\n      title: \"Total Deaths\",\r\n      TotalDeaths: globalData.Global.TotalDeaths,\r\n    },\r\n    {\r\n      title: \"Total Recovered\",\r\n      TotalRecovered: globalData.Global.TotalRecovered,\r\n    },\r\n  ];\r\n\r\n  const dataL6M = covidData && [\r\n    {\r\n      name: covidData[covidData.length - 210].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 210].Deaths,\r\n      cases: covidData[covidData.length - 210].Confirmed,\r\n      recovered: covidData[covidData.length - 210].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 181].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 181].Deaths,\r\n      cases: covidData[covidData.length - 181].Confirmed,\r\n      recovered: covidData[covidData.length - 181].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 150].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 150].Deaths,\r\n      cases: covidData[covidData.length - 150].Confirmed,\r\n      recovered: covidData[covidData.length - 150].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 121].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 121].Deaths,\r\n      cases: covidData[covidData.length - 121].Confirmed,\r\n      recovered: covidData[covidData.length - 121].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 91].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 91].Deaths,\r\n      cases: covidData[covidData.length - 91].Confirmed,\r\n      recovered: covidData[covidData.length - 91].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 61].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 61].Deaths,\r\n      cases: covidData[covidData.length - 61].Confirmed,\r\n      recovered: covidData[covidData.length - 61].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 31].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 31].Deaths,\r\n      cases: covidData[covidData.length - 31].Confirmed,\r\n      recovered: covidData[covidData.length - 31].Recovered,\r\n    },\r\n    {\r\n      name: covidData[covidData.length - 1].Date.slice(0, 10),\r\n      deaths: covidData[covidData.length - 1].Deaths,\r\n      cases: covidData[covidData.length - 1].Confirmed,\r\n      recovered: covidData[covidData.length - 1].Recovered,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {isGlobal && (\r\n        <div className=\"data-chart\">\r\n          <BarChart\r\n            width={900}\r\n            height={300}\r\n            data={gDataL6}\r\n            margin={{\r\n              top: 20,\r\n              right: 30,\r\n              left: 20,\r\n              bottom: 5,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"title\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Bar dataKey=\"TotalConfirmed\" stackId=\"a\" fill=\"orange\" />\r\n            <Bar dataKey=\"TotalDeaths\" stackId=\"a\" fill=\"red\" />\r\n            <Bar dataKey=\"TotalRecovered\" stackId=\"a\" fill=\"green\" />\r\n          </BarChart>\r\n        </div>\r\n      )}\r\n      {!isGlobal && (\r\n        <div>\r\n          <div className=\"data-chart\">\r\n            <h4>Confirmed Cases over 6 month time period.</h4>\r\n            <AreaChart\r\n              width={900}\r\n              height={400}\r\n              data={dataL6M}\r\n              margin={{\r\n                top: 10,\r\n                right: 30,\r\n                left: 0,\r\n                bottom: 0,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis type=\"number\" domain={[0, 100000]} />\r\n              <Tooltip />\r\n              <Area type=\"monotone\" dataKey=\"cases\" stroke=\"#8884d8\" fill=\"orange\" />\r\n            </AreaChart>\r\n          </div>\r\n\r\n          <div className=\"data-chart\">\r\n            <h4>Total Deaths over 6 month time period.</h4>\r\n            <AreaChart\r\n              width={900}\r\n              height={400}\r\n              data={dataL6M}\r\n              margin={{\r\n                top: 10,\r\n                right: 30,\r\n                left: 0,\r\n                bottom: 0,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis type=\"number\" domain={[0, 50000]} />\r\n              <Tooltip />\r\n              <Area type=\"monotone\" dataKey=\"deaths\" stroke=\"#8884d8\" fill=\"red\" />\r\n            </AreaChart>\r\n          </div>\r\n\r\n          <div className=\"data-chart\">\r\n            <h4>Total Recovered over 6 month time period.</h4>\r\n            <AreaChart\r\n              width={900}\r\n              height={400}\r\n              data={dataL6M}\r\n              margin={{\r\n                top: 10,\r\n                right: 30,\r\n                left: 0,\r\n                bottom: 0,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis type=\"number\" domain={[0, 100000]} />\r\n              <Tooltip />\r\n              <Area type=\"monotone\" dataKey=\"recovered\" stroke=\"#8884d8\" fill=\"green\" />\r\n            </AreaChart>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport MainLayout from \"./Layouts/MainLayout\";\nimport Axios from \"axios\";\nimport { Covid19DataProvider } from \"./Context/CovidData\";\nimport Inputs from \"./Components/Inputs\";\nimport DataDisplay from \"./Components/DataDisplay\";\nimport Chart from \"./Components/Chart\";\n\nfunction App() {\n  const [countryList, setCountryList] = useState();\n  const [covidData, setCovidData] = useState();\n  const [globalData, setGlobalData] = useState();\n  const [selectedCountry, setSelectedCountry] = useState();\n  const [error, setError] = useState();\n  const [isGlobal, setIsGlobal] = useState(true);\n  const [clientWidth, setClientWidth] = useState(window.innerWidth);\n\n  //global data\n  useEffect(() => {\n    Axios.get(`https://api.covid19api.com/summary`)\n      .then((response) => {\n        setGlobalData(response.data);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  // get country name\n  useEffect(() => {\n    Axios.get(`https://api.covid19api.com/countries`)\n      .then((response) => {\n        setCountryList(\n          response.data.sort((a, b) => {\n            if (a.Country < b.Country) {\n              return -1;\n            }\n            if (a.Country > b.Country) {\n              return 1;\n            }\n            return 0;\n          })\n        );\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  //use country name to put on query search, default is United States\n  useEffect(() => {\n    Axios.get(`https://api.covid19api.com/total/country/${selectedCountry}`)\n      .then((response) => {\n        if (response.data.length === 0) {\n          return setError(\n            \"There is no data reported for selected country, please try again later or choose another country.\"\n          );\n        }\n        setCovidData(response.data);\n        setError(\"\");\n      })\n      .catch((err) => setIsGlobal(true));\n  }, [selectedCountry]);\n\n  //user viewport to display graph\n  useEffect(() => {\n    const handleResize = () => {\n      console.log(window.innerWidth);\n      setClientWidth(window.innerWidth);\n    };\n    window.addEventListener(\"resize\", handleResize);\n  });\n\n  const handleChange = (e) => {\n    setSelectedCountry(e.target.value);\n    if (e.target.value !== \"global\") {\n      setIsGlobal(false);\n    } else if (e.target.value.toLowerCase() !== \"global\") {\n      setIsGlobal(true);\n    }\n  };\n\n  return (\n    <div className=\"App\" onResi>\n      <Covid19DataProvider value={{ covidData, globalData, isGlobal, setIsGlobal }}>\n        <MainLayout>\n          <div className=\"main-section\">\n            <div className=\"data-display-section\">\n              <DataDisplay error={error} />\n            </div>\n            <div className=\"select-input\">\n              <Inputs name=\"Countries\" handleChange={handleChange} defaultValue={\"Global\"}>\n                <option value=\"global\">Global</option>\n                {countryList &&\n                  countryList.map((item) => (\n                    <option key={item.Country} value={item.Country}>\n                      {item.Country}\n                    </option>\n                  ))}\n              </Inputs>\n            </div>\n          </div>\n\n          {clientWidth > 1050 ? (\n            <Chart />\n          ) : (\n            <div className=\"display-error\">\n              <h3>Your screen is too small for viewing charts.</h3>\n              <p>Please turn your phone to landscape mode or try using a larger screen to view.</p>\n            </div>\n          )}\n        </MainLayout>\n      </Covid19DataProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}